{
  "version": 3,
  "sources": ["myLib.ts", "myApp.ts"],
  "sourcesContent": ["export type Filter<U,V> = (arg: U) => V;\nexport type Task<T> = [Filter<T,T>, ...string[]];\nexport type Connector<TParent,TArg,TChild> = <T extends TParent, U extends TArg, V extends TChild>(filter: Filter<U,V>) => Task<T>\nexport type Branch<TParent,U,V> = <T extends TParent>(connect: ((filter: Filter<U,V>) => Task<T>)) => Task<T>;\nexport type Adapter<TParent, U, T, TConvert> = <K extends TConvert>(...args: (Task<T> | K)[]) => Branch<TParent,U,T>;\nexport type NodeTask<T,U> = Task<[T,U]>;\nexport type NodeFactory<PDoc,TNode,TDoc> = <TArg extends PDoc, T extends TNode, U extends TDoc>(doc: TArg, tag: string) => [T,U];\nexport type NodeConnector<T,TDoc,V,VDoc> = Connector<[T,TDoc],TDoc,[V,VDoc]>;\nexport type NodeBranch<TNode,TDoc,TChild,VDoc> = Branch<[TNode,TDoc],TDoc,[TChild,VDoc]>;\nexport type NodeAdapterArg<T,TDoc,V,VDoc,TConvert> = (NodeTask<T,TDoc> | TConvert | NodeBranch<T,TDoc,V,VDoc>)[];\nexport type NodeAdapterArgsFormater<TNode,TDoc,TChild, VDoc, TConvert> = \n    <T extends TNode, V extends TChild>(connector: NodeConnector<T,TDoc,V,VDoc>) => (args: NodeAdapterArg<T,TDoc,V,VDoc,TConvert>) => NodeTask<T,TDoc>[];\nexport type NodeAdapter<P,PDoc,T,TDoc,V,VDoc,TConvert> = Adapter<[P,PDoc],PDoc,[T,TDoc],TConvert | NodeBranch<T,TDoc,V,VDoc>>;\nconst createDOMAdapter = <P,PDoc,T,TDoc,V,VDoc,TConvert>(\n    tagName: string,\n    factory: NodeFactory<PDoc,T,TDoc>, \n    connector: NodeConnector<T,TDoc,V,VDoc>,\n    format: NodeAdapterArgsFormater<T,TDoc,V,VDoc,TConvert>\n): NodeAdapter<P,PDoc,T,TDoc,V,VDoc,TConvert> => \n    (...args: NodeAdapterArg<T,TDoc,V,VDoc,TConvert>): NodeBranch<P,PDoc,T,TDoc> => {\n        const tasks = format(connector)(args).map(entry => entry[0]);\n        const build: Filter<PDoc,[T,TDoc]> = (doc: PDoc) => tasks.reduce((node, task) => task(node), factory(doc, tagName));\n        return <TParent extends [P,PDoc]>(connect: ((filter: Filter<PDoc,[T,TDoc]>) => Task<TParent>)):Task<TParent> => connect(build);\n    }\nexport type Lookup<T> = Filter<void,T|null|undefined>;\nexport type Curator<T> = (lookup: Lookup<T>) => void;\nexport type Store<T> = [Curator<T>, Lookup<T>];\nexport type Query = Store<[string, unknown][]>;\nexport type NodePicker<T,U> = Lookup<[T,U]>;\nexport type NodeRenderer<TNode,TDoc> = <T extends TNode, U extends TDoc>(lookup: NodePicker<T,U>, ...tasks: NodeTask<T,U>[]) => NodePicker<T,U>;\nconst textNodeFactory: NodeFactory<Document | XMLDocument, Text, Document> = <T extends Text, U extends Document>(doc: Document, _: string) => \n    [doc.createTextNode('') as T, doc as U];\nconst htmlNodeFactory: NodeFactory<Document, HTMLElement, Document> = <T extends HTMLElement, U extends Document>(doc: Document, tagName: string) => \n    [doc.createElement(tagName) as T, doc as U];\nconst svgNodeFactory: NodeFactory<Document, SVGElement, XMLDocument> = <T extends SVGElement, U extends XMLDocument>(doc: XMLDocument, tagName: string) => \n    [doc.createElementNS(\"http://www.w3.org/2000/svg\", tagName) as T, doc as U];\nconst mathmlNodeFactory: NodeFactory<Document, MathMLElement, XMLDocument> = <T extends MathMLElement, U extends XMLDocument>(doc: XMLDocument, tagName: string) => \n    [doc.createElementNS(\"http://www.w3.org/1998/Math/MathML\", tagName) as T, doc as U];\nconst appendNodeConnector: NodeConnector<Node, Document, Node, Document> = \n    <T extends [Node, Document], TArg extends Document, V extends [Node,Document]>(filter: Filter<TArg,V>): Task<T> => [\n        (entry: T) => {\n            entry[0].appendChild(filter(entry[1] as TArg)[0]);\n            return entry;\n        }\n    ];\nconst prependNodeConnector: NodeConnector<Element, Document, Node, Document> = \n    <T extends [Element, Document], TArg extends Document, V extends [Node,Document]>(filter: Filter<TArg,V>): Task<T> => [\n        (entry: T) => {\n            entry[0].prepend(filter(entry[1] as TArg)[0]);\n            return entry;\n        }\n    ];\nconst noNodeConnector: NodeConnector<Node, Document, Node | undefined, Document> = \n    <T extends [Node, Document], U extends Document, V extends [Node | undefined, Document]>(_: Filter<U,V>): Task<T> => [\n        (entry: T) => entry\n    ];\nconst formatAdapterArgs: NodeAdapterArgsFormater<Node | undefined, Document, Node | undefined, Document, string | undefined> = \n    <T extends Node | undefined, V extends Node | undefined>(connector: NodeConnector<T,Document,V,Document>) => \n    (args: NodeAdapterArg<T,Document,V,Document,string | undefined>): NodeTask<T,Document>[] => \n        (args.filter(arg => arg != null) as NodeAdapterArg<T,Document,V,Document,string>).map(arg => {\n            if(typeof arg === 'function') return arg(connector);\n            if(typeof arg === 'string') return [\n                (entry: [T,Document]) => {\n                    entry[0]?.appendChild(entry[1].createTextNode(arg));\n                    return entry;\n                }\n            ];\n            return arg;\n        });\nexport const getElement = <T extends Element, U extends Document>(query: string, container: Document | Element): NodePicker<T,U> => () => {\n    const node = container.querySelector(query);\n    return node == null ? null : [node as T, node.ownerDocument as U];\n}\nexport const fromElement = <T extends Element, U extends Document>(node: Element): NodePicker<T,U> => () => [node as T,node.ownerDocument as U];\nexport const render : NodeRenderer<Element,Document> = <T extends Element, U extends Document>( lookup: NodePicker<T,U>, ...tasks: NodeTask<T,U>[]): NodePicker<T,U> => () => {\n    const target = lookup();\n    return target == null ? target : tasks.map(task => task[0]).reduce((node, task) => task(node), target);\n}\nexport const createRef = <T extends Node,U extends Document>(): Store<[T,U]> => {\n    let innerLookup: Lookup<[T,U]> = () => null;\n    return [\n        (lookup: Lookup<[T,U]>) => { innerLookup = lookup; },\n        () => innerLookup()\n    ];\n}\nexport const createQuery = (): Query => {\n    const registeredLookups: Lookup<[string, unknown][]>[] = [];\n    return [\n        (lookup: Lookup<[string, unknown][]>) => { registeredLookups.push(lookup); },\n        () => registeredLookups.reduce((entries: [string, unknown][], lookup) => entries.concat(lookup() ?? []), [])\n    ]\n}\nexport const store = <T extends Node,U extends Document>(curator: Curator<[T,U]>): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        curator(() => entry);\n        return entry;\n    }\n]\nexport const query = <T extends Node,U extends Document>(curator: Curator<[string, unknown][]>, ...queries: Filter<[T,U],[string, unknown][]>[]): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        curator(() => queries.reduce((entries: [string, unknown][], query) => entries.concat(query(entry)), []));\n        return entry;\n    }\n]\nexport const apply = <T extends Node, U extends Document>(action: ((tnode: T, udoc: U) => [T,U])): NodeTask<T,U> => [\n    (entry: [T,U]) => action(...entry)\n]\nconst elementFactory = <T extends Element, U extends Document>(doc: Document, tagName: string | [string,string]) => {\n    if(typeof tagName === 'string') return htmlNodeFactory(doc, tagName) as unknown as [T,U];\n    switch(tagName[1]){\n        case 'svg': return svgNodeFactory(doc, tagName[0]) as unknown as [T,U];\n        case 'mathml': return mathmlNodeFactory(doc, tagName[0]) as unknown as [T,U];\n        default: return htmlNodeFactory(doc, tagName[0]) as unknown as [T,U];\n    }\n}\nexport const element = <T extends Element>(\n    tagName: string | [string,string], \n    ...args: NodeAdapterArg<T,Document,Node,Document,string | undefined>\n): NodeBranch<Element,Document,Element,Document> => {\n    const tasks = formatAdapterArgs<T,Node>(appendNodeConnector)(args).map(entry => entry[0]);\n    const build: Filter<Document,[T,Document]> = (doc: Document) => tasks.reduce((node, task) => task(node), elementFactory<T,Document>(doc, tagName));\n    return <TParent extends [Element,Document]>(connect: ((filter: Filter<Document,[T,Document]>) => Task<TParent>)):Task<TParent> => connect(build);\n}\nexport const append = <T extends Node, U extends Document>(branch: NodeBranch<T,U,Node,Document>): NodeTask<T,U> => branch(appendNodeConnector);\nexport const prepend = <T extends Element, U extends Document>(branch: NodeBranch<T,U,Node,Document>): NodeTask<T,U> => branch(prependNodeConnector);\nexport const appendTo = <T extends Node, V extends Node, U extends Document>(lookup: NodePicker<V,U>): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        lookup()?.[0].appendChild(entry[0]);\n        return entry;\n    }\n]\nexport const prependTo = <T extends Node, V extends Element, U extends Document>(lookup: NodePicker<V,U>): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        lookup()?.[0].prepend(entry[0]);\n        return entry;\n    }\n]\nexport type PropertyValueType = string | ((previousValue: string | null) => string) | undefined;\nexport type PropertyAdapter = <T extends Node, U extends Document>(value: PropertyValueType) => NodeTask<T,U>;\nexport type DataPropertyValueType = string | ((previousValue?: string) => string) | undefined;\nexport type CssValueType = string | ((previousValue: string) => string);\nexport const setProp = <T extends Node, U extends Document>(key: string, value: PropertyValueType): NodeTask<T, U> => [\n    value === undefined ?\n        (entry: [T,U]) => { entry[0][key] = null; return entry; } :\n        typeof value === 'function' ?\n            (entry: [T,U]) => { entry[0][key] = value(entry[0][key]); return entry; } :\n            (entry: [T,U]) => { entry[0][key] = value; return entry; }\n];\nexport const removeProp = <T extends Node, U extends Document>(adapter: PropertyAdapter): NodeTask<T,U> => adapter(undefined);\nexport const getProp = <T extends Node, U extends Document>(name: string, key?: string): Filter<[T,U],[string, unknown][]> =>\n    (entry: [T,U]) => ([[key || name, entry[0][name]]] as [string, unknown][]);\nexport const setAttr = <T extends Element, U extends Document>(key: string, value: PropertyValueType): NodeTask<T, U> => [\n    value === undefined ?\n        (entry: [T,U]) => { entry[0].removeAttribute(key); return entry; } :\n        typeof value === 'function' ?\n            (entry: [T,U]) => { entry[0].setAttribute(key, value(entry[0].getAttribute(key))); return entry; } :\n            (entry: [T,U]) => { entry[0].setAttribute(key, value); return entry; }\n];\nexport const removeAttr = <T extends Element, U extends Document>(key: string): NodeTask<T,U> => setAttr(key, undefined);\nexport const getAttr = <T extends Element, U extends Document>(name: string, key?: string): Filter<[T,U],[string, unknown][]> =>\n    (entry: [T,U]) => ([[key || name, entry[0].getAttribute(name)]] as [string, unknown][]);\nexport const setAria = <T extends Element, U extends Document>(key: string, value: PropertyValueType): NodeTask<T, U> => setAttr('aria-'+key, value);\nexport const removeAria = <T extends Element, U extends Document>(key: string): NodeTask<T,U> => removeAttr('aria-'+key);\nexport const getAria = <T extends Element, U extends Document>(name: string, key?: string): Filter<[T,U],[string, unknown][]> => getAttr('aria-'+name, key);\nexport const setData = <T extends HTMLElement, U extends Document>(key: string, value: DataPropertyValueType): NodeTask<T, U> => [\n    value === undefined ?\n        (entry: [T,U]) => { delete entry[0].dataset[key]; return entry; } :\n        typeof value === 'function' ?\n            (entry: [T,U]) => { entry[0].dataset[key] = value(entry[0].dataset[key]); return entry; } :\n            (entry: [T,U]) => { entry[0].dataset[key] = value; return entry; }\n];\nexport const removeData = <T extends HTMLElement, U extends Document>(key: string): NodeTask<T,U> => setData(key, undefined);\nexport const getData = <T extends HTMLElement, U extends Document>(name: string, key?: string): Filter<[T,U],[string, unknown][]> =>\n    (entry: [T,U]) => ([[key || name, entry[0].dataset[name]]] as [string, unknown][]);\nexport const setStyle = <T extends HTMLElement, U extends Document>(key: string, value: DataPropertyValueType): NodeTask<T, U> => [\n    value === undefined ?\n        (entry: [T,U]) => { entry[0].style[key] = null; return entry; } :\n        typeof value === 'function' ?\n            (entry: [T,U]) => { entry[0].style[key] = value(entry[0].style[key]); return entry; } :\n            (entry: [T,U]) => { entry[0].style[key] = value; return entry; }\n];\nexport const setCss = <T extends HTMLElement, U extends Document>(value: CssValueType): NodeTask<T, U> => [\n    typeof value === 'function' ?\n            (entry: [T,U]) => { entry[0].style.cssText = value(entry[0].style.cssText); return entry; } :\n            (entry: [T,U]) => { entry[0].style.cssText = value; return entry; }\n];\nexport const removeStyle = <T extends HTMLElement, U extends Document>(key: string): NodeTask<T,U> => setStyle(key, undefined);\nexport const getStyle = <T extends HTMLElement, U extends Document>(name: string, key?: string): Filter<[T,U],[string, unknown][]> =>\n    (entry: [T,U]) => ([[key || name, entry[0].style[name]]] as [string, unknown][]);\nexport const subscribe = <T extends EventTarget, U extends Document>(\n    eventType: string, \n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => [\n    (entry: [T,U]) => { entry[0].addEventListener(eventType, listener, options); return entry; }\n]\nexport const unsubscribe = <T extends EventTarget, U extends Document>(\n    eventType: string, \n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => [\n    (entry: [T,U]) => { entry[0].removeEventListener(eventType, listener, options); return entry; }\n]\nexport const text = createDOMAdapter<\n    Element, Document, \n    Text, Document, \n    undefined, Document, \n    string\n>('', textNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const a = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLAnchorElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const abbr = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const address = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const area = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLAreaElement, Document, \n    undefined, Document, \n    string\n>('a', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const article = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const aside = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const audio = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLAudioElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('a', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const b = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const base = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLBaseElement, Document, \n    undefined, Document, \n    string\n>('b', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const bdi = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const bdo = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const blockquote = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLQuoteElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const body = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const br = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLBRElement, Document, \n    undefined, Document, \n    string\n>('b', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const button = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLButtonElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('b', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const canvas = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLCanvasElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('c', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const caption = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableCaptionElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('c', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const cite = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLQuoteElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('c', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const code = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('c', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const col = createDOMAdapter<\n    HTMLTableColElement, Document, \n    HTMLTableColElement, Document, \n    undefined, Document, \n    string\n>('c', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const colgroup = createDOMAdapter<\n    HTMLTableElement, Document, \n    HTMLTableColElement, Document, \n    HTMLTableColElement, Document, \n    string\n>('c', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const data = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLDataElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const datalist = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLDataListElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const dd = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const del = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLModElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const details = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const dfn = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const dialog = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLDialogElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const div = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLDivElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const dl = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const dt = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('d', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const em = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('e', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const embed = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLEmbedElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('e', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const fieldset = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLFieldSetElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('f', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const figcaption = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('f', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const figure = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('f', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const footer = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('f', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const form = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLFormElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('f', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h1 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h2 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h3 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h4 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h5 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const h6 = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadingElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const head = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHeadElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const header = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const hgroup = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const hr = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLHRElement, Document, \n    undefined, Document, \n    string\n>('h', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const html = createDOMAdapter<\n    undefined, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const i = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('i', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const iframe = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLIFrameElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('i', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const img = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLImageElement, Document, \n    undefined, Document, \n    string\n>('i', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const input = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLInputElement, Document, \n    undefined, Document, \n    string\n>('i', htmlNodeFactory, noNodeConnector, formatAdapterArgs);\nexport const ins = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLModElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('i', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const kbd = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('k', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const label = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLLabelElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('l', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const legend = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLLegendElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('l', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const li = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLLIElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('l', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const link = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLLinkElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('l', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const main = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('m', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const mark = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('m', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const menu = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLMenuElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('m', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const meta = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('m', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const meter = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLMeterElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('m', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const nav = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('n', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const noscript = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('n', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const object = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLObjectElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('o', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const ol = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLOListElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('o', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const optgroup = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLOptGroupElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('o', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const option = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLOptionElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('o', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const output = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLOutputElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('o', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const p = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLParagraphElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('p', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const param = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLParagraphElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('p', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const picture = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLPictureElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('p', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const pre = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLPreElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('p', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const progress = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLProgressElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('p', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const q = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLQuoteElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('q', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const rp = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('r', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const rt = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('r', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const ruby = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('r', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const s = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const samp = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const script = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const search = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const section = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const select = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLSelectElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const htmlSlot = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLSlotElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('slot', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const small = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const source = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLSourceElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const span = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const strong = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const style = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const sub = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const summary = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const sup = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('s', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const table = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const tbody = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableSectionElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const td = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableCellElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('td', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const template = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTemplateElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const textarea = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTextAreaElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const tfoot = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableSectionElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const th = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableCellElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const thead = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableSectionElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const tile = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTimeElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const htmlTitle = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTitleElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('h', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const tr = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTableRowElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const track = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLTrackElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('t', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const u = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('u', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const ul = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLUListElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('u', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const htmlVar = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('var', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const video = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLVideoElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('v', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const wbr = createDOMAdapter<\n    HTMLElement, Document, \n    HTMLElement, Document, \n    Text | HTMLElement, Document, \n    string\n>('w', htmlNodeFactory, appendNodeConnector, formatAdapterArgs);\nexport const id = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('id', value);\nexport const accesskey = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('accesskey', value);\nexport const autocapitalize = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('autocapitalize', value);\nexport const autofocus = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('autofocus', value);\nexport const enterkeyhint = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('enterkeyhint', value);\nexport const exportparts = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('exportparts', value);\nexport const hidden = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('hidden', value);\nexport const inert = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('inert', value);\nexport const inputmode = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('inputmode', value);\nexport const is = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('is', value);\nexport const nonce = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('nonce', value);\nexport const part = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('part', value);\nexport const popover = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('popover', value);\nexport const slot = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('slot', value);\nexport const spellcheck = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('spellcheck', value);\nexport const translate = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('translate', value);\nexport const className = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('class', value);\nexport const title = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('title', value);\nexport const tabIndex = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('tabIndex', value);\nexport const lang = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('lang', value);\nexport const dir = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('dir', value);\nexport const draggable = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('draggable', value);\nexport const itemid = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('itemid', value);\nexport const itemprop = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('itemprop', value);\nexport const itemref = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('itemref', value);\nexport const itemscope = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('itemscope', value);\nexport const itemtype = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('itemtype', value);\nexport const crossorigin = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('crossorigin', value);\nexport const disabled = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('disabled', value);\nexport const elementtiming = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('elementtiming', value);\nexport const max = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('max', value);\nexport const min = <T extends HTMLElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('min', value);\nexport const step = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('step', value);\nexport const type = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('type', value);\nexport const accept = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('accept', value);\nexport const capture = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('capture', value);\nexport const pattern = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('pattern', value);\nexport const placeholder = <T extends HTMLInputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('placeholder', value);\nexport const $for = <T extends HTMLLabelElement | HTMLOutputElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('for', value);\nexport const size = <T extends HTMLInputElement | HTMLSelectElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('size', value);\nexport const dirname = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('dirname', value);\nexport const multiple = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('multiple', value);\nexport const readonly = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('readonly', value);\nexport const maxlength = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('maxlength', value);\nexport const minlength = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('minlength', value);\nexport const required = <T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('required', value);\nexport const rel = <T extends HTMLAnchorElement | HTMLAreaElement | HTMLLinkElement | HTMLFormElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('rel', value);\nexport const autocomplete = <T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | HTMLFormElement, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setAttr('autocomplete', value);\nexport const nodeValue = <T extends Node, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setProp('nodeValue', value);\nexport const textContent = <T extends Node, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setProp('textContent', value);\nexport const innerHTML = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setProp('innerHTML', value);\nexport const outerHTML = <T extends Element, U extends Document>(value: PropertyValueType): NodeTask<T,U> => setProp('outerHTML', value);\nexport const getId = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('id', key);\nexport const getAccesskey = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('accesskey', key);\nexport const getAutocapitalize = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('autocapitalize', key);\nexport const getAutofocus = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('autofocus', key);\nexport const getEnterkeyhint = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('enterkeyhint', key);\nexport const getExportparts = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('exportparts', key);\nexport const getHidden = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('hidden', key);\nexport const getInert = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('inert', key);\nexport const getInputmode = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('inputmode', key);\nexport const getIs = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('is', key);\nexport const getNonce = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('nonce', key);\nexport const getPart = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('part', key);\nexport const getPopover = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('popover', key);\nexport const getSlot = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('slot', key);\nexport const getSpellcheck = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('spellcheck', key);\nexport const getTranslate = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('translate', key);\nexport const getClassName = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('class', key);\nexport const getNodeValue = <T extends Node, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('nodeValue', key);\nexport const getTextContent = <T extends Node, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('textContent', key);\nexport const getInnerHTML = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('innerHTML', key);\nexport const getOuterHTML = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('outerHTML', key);\nexport const nodeName = <T extends Node, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('nodeName', key);\nexport const nodeType = <T extends Node, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('nodeType', key);\nexport const clientHeight = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('clientHeight', key);\nexport const clientLeft = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('clientLeft', key);\nexport const clientTop = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('clientTop', key);\nexport const clientWidth = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('clientWidth', key);\nexport const tagName = <T extends Element, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getProp('tagName', key);\nexport const getTitle = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('title', key);\nexport const getTabIndex = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('tabIndex', key);\nexport const getLang = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('lang', key);\nexport const getDir = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('dir', key);\nexport const getDraggable = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('draggable', key);\nexport const getItemid = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('itemid', key);\nexport const getItemprop = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('itemprop', key);\nexport const getItemref = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('itemref', key);\nexport const getItemscope = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('itemscope', key);\nexport const getItemtype = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('itemtype', key);\nexport const getCrossorigin = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('crossorigin', key);\nexport const getDisabled = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('disabled', key);\nexport const getElementtiming = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('elementtiming', key);\nexport const getMax = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('max', key);\nexport const getMin = <T extends HTMLElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('min', key);\nexport const getStep = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('step', key);\nexport const getType = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('type', key);\nexport const getAccept = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('accept', key);\nexport const getCapture = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('capture', key);\nexport const getPattern = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('pattern', key);\nexport const getPlaceholder = <T extends HTMLInputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('placeholder', key);\nexport const getFor = <T extends HTMLLabelElement | HTMLOutputElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('for', key);\nexport const getSize = <T extends HTMLInputElement | HTMLSelectElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('size', key);\nexport const getDirname = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('dirname', key);\nexport const getMultiple = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('multiple', key);\nexport const getReadonly = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('readonly', key);\nexport const getMaxlength = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('maxlength', key);\nexport const getMinlength = <T extends HTMLInputElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('minlength', key);\nexport const getRequired = <T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('required', key);\nexport const getRel = <T extends HTMLAnchorElement | HTMLAreaElement | HTMLLinkElement | HTMLFormElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('rel', key);\nexport const getAutocomplete = <T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | HTMLFormElement, U extends Document>(key?: string): Filter<[T,U],[string, unknown][]> => getAttr('autocomplete', key);\nexport const addClass = <T extends Element, U extends Document>(name: string): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        entry[0].classList.add(name);\n        return entry;\n    }\n];\nexport const removeClass = <T extends Element, U extends Document>(name: string): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        entry[0].classList.remove(name);\n        return entry;\n    }\n];\nexport const toggleClass = <T extends Element, U extends Document>(name: string): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        entry[0].classList.toggle(name);\n        return entry;\n    }\n];\nexport const dispatch = <T extends EventTarget, U extends Document>(event: Event): NodeTask<T,U> => [\n    (entry: [T,U]) => {\n        entry[0].dispatchEvent(event);\n        return entry;\n    }\n];\nexport const onClick = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('click', listener, options);\nexport const onDbClick = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('dbclick', listener, options);\nexport const onBlur = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('blur', listener, options);\nexport const onFocus = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('focus', listener, options);\nexport const onChange = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('change', listener, options);\nexport const onMouseDown = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mousedown', listener, options);\nexport const onMouseEnter = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mouseenter', listener, options);\nexport const onMouseLeave = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mouseleave', listener, options);\nexport const onMouseMove = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mousemove', listener, options);\nexport const onMouseOut = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mouseout', listener, options);\nexport const onMouseOver = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mouseover', listener, options);\nexport const onMouseUp = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('mouseup', listener, options);\nexport const onWheel = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('wheel', listener, options);\nexport const onScroll = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('scroll', listener, options);\nexport const onKeyDown = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('keydown', listener, options);\nexport const onKeyPress = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('keypress', listener, options);\nexport const onKeyUp = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('keyup', listener, options);\nexport const onCopy = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('copy', listener, options);\nexport const onCut = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('cut', listener, options);\nexport const onPaste = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('paste', listener, options);\nexport const onSelect = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('select', listener, options);\nexport const onFocusIn = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('focusin', listener, options);\nexport const onFocusOut = <T extends EventTarget, U extends Document>(\n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions\n): NodeTask<T,U> => subscribe('focusout', listener, options);", "import { div, getElement, h2, id, prepend, render, text } from \"./myLib\"\n\n\nrender<HTMLElement,Document>(\n    getElement(\"body\", document), \n    prepend(\n        div(id(\"main\"), \n            h2(text(\"Hello, World!\"))\n        )\n    )\n);"],
  "mappings": "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",
  "names": ["createDOMAdapter", "tagName", "factory", "connector", "format", "args", "tasks", "entry", "build", "doc", "node", "task", "connect", "textNodeFactory", "_", "htmlNodeFactory", "appendNodeConnector", "filter", "entry", "prependNodeConnector", "noNodeConnector", "_", "formatAdapterArgs", "connector", "args", "arg", "_a", "getElement", "query", "container", "node", "render", "lookup", "tasks", "target", "task", "node", "prepend", "branch", "prependNodeConnector", "setAttr", "key", "value", "entry", "text", "createDOMAdapter", "textNodeFactory", "noNodeConnector", "formatAdapterArgs", "a", "htmlNodeFactory", "appendNodeConnector", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "link", "main", "mark", "menu", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "search", "section", "select", "htmlSlot", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tile", "htmlTitle", "tr", "track", "u", "ul", "htmlVar", "video", "wbr", "id", "value", "setAttr", "render", "getElement", "prepend", "div", "id", "h2", "text"]
}

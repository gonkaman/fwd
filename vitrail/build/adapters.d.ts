import { Result } from "fwd-result";
import { RPipeEntry } from "fwd-result-pipe";
export declare const attach: <T extends Element, E>(target: string | T, update: RPipeEntry<T, E, T, E>) => () => Result<T, E>;
export type Adapter<TBase> = <T extends TBase, E>(...args: any[]) => RPipeEntry<T, E, T, E>;
export declare const attr: <T extends Element, E>(name: string, value: string | ((previousValue: string | null) => string)) => RPipeEntry<T, E, T, E>;
export declare const attrMap: <T extends Element, E>(attributes: Record<string, E>) => RPipeEntry<T, E, T, E>;
export declare const removeAttr: <T extends Element, E>(name: string) => RPipeEntry<T, E, T, E>;
export declare const removeAttrMap: <T extends Element, E>(attributes: string[]) => RPipeEntry<T, E, T, E>;
export declare const aria: <T extends Element, E>(name: string, value: string | ((previousValue: string | null) => string)) => RPipeEntry<T, E, T, E>;
export declare const ariaMap: <T extends Element, E>(attributes: Record<string, E>) => RPipeEntry<T, E, T, E>;
export declare const removeAria: <T extends Element, E>(name: string) => RPipeEntry<T, E, T, E>;
export declare const removeAriaMap: <T extends Element, E>(attributes: string[]) => RPipeEntry<T, E, T, E>;
export declare const dataAttr: <T extends HTMLElement, E>(name: string, value: string | ((previousValue: string | null) => string)) => RPipeEntry<T, E, T, E>;
export declare const dataMap: <T extends HTMLElement, E>(attributes: Record<string, E>) => RPipeEntry<T, E, T, E>;
export declare const removeDataAttr: <T extends HTMLElement, E>(name: string) => RPipeEntry<T, E, T, E>;
export declare const removeDataMap: <T extends HTMLElement, E>(attributes: string[]) => RPipeEntry<T, E, T, E>;
export declare const styleAttr: <T extends HTMLElement, E>(name: string, value: string | ((previousValue: string | null) => string)) => RPipeEntry<T, E, T, E>;
export declare const cssText: <T extends HTMLElement, E>(css: string) => RPipeEntry<T, E, T, E>;
export declare const styleMap: <T extends HTMLElement, E>(attributes: Record<string, E>) => RPipeEntry<T, E, T, E>;
export declare const removeStyleAttr: <T extends HTMLElement, E>(name: string) => RPipeEntry<T, E, T, E>;
export declare const removeStyleMap: <T extends HTMLElement, E>(attributes: string[]) => RPipeEntry<T, E, T, E>;
